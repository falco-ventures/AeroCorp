<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title>Map of New Eden</title>

    <!-- Babylon.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
    <script src="https://assets.babylonjs.com/generated/Assets.js"></script>
    <script src="https://preview.babylonjs.com/ammo.js"></script>
    <script src="https://preview.babylonjs.com/cannon.js"></script>
    <script src="https://preview.babylonjs.com/Oimo.js"></script>
    <script src="https://preview.babylonjs.com/earcut.min.js"></script>
    <script src="https://preview.babylonjs.com/babylon.js"></script>
    <script src="https://preview.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
    <script src="https://preview.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
    <script src="https://preview.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
    <script src="https://preview.babylonjs.com/loaders/babylonjs.loaders.js"></script>
    <script src="https://preview.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
    <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>
    <script src="https://preview.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>

    <style>
        html,
        body {
            overflow: hidden;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            color: black;
        }

        #renderCanvas {
            width: 100%;
            height: 80%;
            touch-action: none;
            /* background-color: rgb(126, 126, 126);
            color: rgb(126, 126, 126); */
        }

        .images {
            position: relative;
        }

        .bet_time {
            position: absolute;
            bottom: 0;
            right: 256px;
            width: 256px;
        }

        .bet_time2 {
            position: absolute;
            bottom: 0;
            right: 0px;
            width: 256px;
        }

        .bet_time3 {
            position: absolute;
            bottom: 0;
            right: 512px;
            width: 256px;
        }

        .bet_time4 {
            position: absolute;
            bottom: 0;
            right: 768px;
            width: 256px;
        }

        ul,
        #myUL {
            list-style-type: none;
        }

        #myUL {
            margin: 0;
            padding: 0;
            color: white;
        }

        .box {
            cursor: pointer;
            -webkit-user-select: none;
            /* Safari 3.1+ */
            -moz-user-select: none;
            /* Firefox 2+ */
            -ms-user-select: none;
            /* IE 10+ */
            user-select: none;

        }

        .box::before {
            content: "\2610";
            color: white;
            display: inline-block;
            margin-right: 6px;
        }

        .check-box::before {
            content: "\2611";
            color: white;
        }

        .nested {
            display: none;
        }

        .active {
            display: block;
        }
    </style>
</head>

<body>
    <div class="images" style="width: 500px; height: 100%; float: left; background: rgb(0, 0, 0); overflow-y: scroll;">
        
        <ul id="myUL">
            <li><span class="box">Universe</span>
                <ul class="nested" id="Ranges">

                    <li><span class="box">hisec</span>
                        <ul class="nested" id="hisec">
                        </ul>
                    </li>

                    <li><span class="box">losec</span>
                        <ul class="nested" id="losec">
                        </ul>
                    </li>

                    <li><span class="box">nullsec</span>
                        <ul class="nested" id="nullsec">
                        </ul>
                    </li>

                    <li><span class="box">wormhole</span>
                        <ul class="nested" id="wormhole">
                        </ul>
                    </li>
                    <li><span class="box">shattered wormhole</span>
                        <ul class="nested" id="shatteredwormhole">
                        </ul>
                    </li>
                    <li><span class="box">adspace</span>
                        <ul class="nested" id="adspace">
                        </ul>
                    </li>
                    <li><span class="box">vspace</span>
                        <ul class="nested" id="vspace">
                        </ul>
                    </li>
                    <li><span class="box">unknown</span>
                        <ul class="nested" id="unknown">
                        </ul>
                    </li>

                </ul>
    </div>
    <div style="margin-left: 500px; height: 100%; background-color:black; ">
        <canvas id="renderCanvas" ></canvas>
    </div>
    <div class="images">
        <a id="downloadAnchorElem" href="javascript:click_download()">
        <div class="bet_time2"><img width=256px src="skymap2.png" ></div>
    </a>
        <div class="bet_time"><img width=256px src="skymap1.jpg"></div>
        <div class="bet_time3"><img width=256px src="skymap3.jpg"></div>
        <div class="bet_time4"><img width=256px src="skymap4.jpg"></div>
    </div>
    <script>

        var gUniverse = null;
        var g3DScene;
        var gHoverPlaneTexture;
        var gHoverSphere;
        var gHoverPlane;
        var gSelectionPlaneTexture;
        var gSelectionSphere;
        var gSelectionPlane;
        var gCamera;
        var gNavigatorCamera;
        var gSelectedGalaxy = "";
        var SPSMesh = null;
        var toggler = document.getElementsByClassName("box");
        var i;
        var gScale = 100;
        var gMeshes = new Array();

        for (i = 0; i < toggler.length; i++) {
            toggler[i].addEventListener("click", click_galaxy_callback);
            toggler[i].addEventListener("click", function () {
                this.parentElement.querySelector(".nested").classList.toggle("active");
                this.classList.toggle("check-box");



            });
        }

        var canvas = document.getElementById("renderCanvas");
        var engine = null;
        var sceneToRender = null;
        window.scene = null;
        var SPS = null;

        var startRenderLoop = function (engine, canvas) {
            engine.runRenderLoop(function () {
                if (sceneToRender != null) {

                    // SPS.setParticles();
                    sceneToRender.render();

                }
            });
        }

        var createDefaultEngine = function () { return new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true, disableWebGL2Support: false }); }
        function loadExternalFile(file, callback) {
            var responseHandled = false;
            var rawFile = new XMLHttpRequest();
            rawFile.overrideMimeType("application/json");
            rawFile.open("GET", file, true);
            rawFile.onreadystatechange = function () {
                if (rawFile.readyState === 4 && !responseHandled) {
                    responseHandled = true;
                    delete rawFile;
                    callback(rawFile.responseText);
                }
            }
            rawFile.send(null);
        }

        function sendCommand(commandName, paramString, callback) {
            function reqListener() {
                // console.log(this.responseText);
                try {
                    callback(JSON.parse(this.responseText));
                } catch {
                    callback(null);
                }
            }

            const req = new XMLHttpRequest();
            req.addEventListener("load", reqListener);
            var url = commandName + "?" + paramString
            req.open("GET", url);
            req.send();
        }

        function create_selection_sphere(name) {
            var sphere = BABYLON.MeshBuilder.CreateSphere("SelectionSphere", { diameter: 0.1, segments: 32 }, g3DScene);
            var plane = BABYLON.MeshBuilder.CreatePlane("SelectionPlane", { width: 2.0, height: 0.3 }, g3DScene);
            var planeMaterial = new BABYLON.StandardMaterial("SelectionMaterial", g3DScene);
            var planeTexture = BABYLON.DynamicTexture = new BABYLON.DynamicTexture("SelectionTexture", { width: 512, height: 256 }, g3DScene);
            planeTexture.getContext();
            planeTexture.hasAlpha = true;
            planeTexture.drawText(name, 0, 100, "bold 44px Arial", "white", "gray", true, true);

            planeMaterial.backFaceCulling = false;
            planeMaterial.disableLighting = true;
            planeMaterial.emissiveColor = new BABYLON.Color3(1.0, 1.0, 1.0);
            planeMaterial.diffuseTexture = planeTexture;
            planeMaterial.opacityTexture = planeTexture;

            plane.material = planeMaterial;
            plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL;
            plane.position.x += 0;
            plane.position.y += 0.5;

            gSelectionSphere = sphere;
            gSelectionPlane = plane;
            gSelectionPlaneTexture = planeTexture;
            gSelectionPlaneTexture.visible = false;
        }

        function create_hover_sphere(name) {
            var sphere = BABYLON.MeshBuilder.CreateSphere("HoverSphere", { diameter: 0.02, segments: 32 }, g3DScene);
            sphere.isPickable = false;
            var sphereMaterial = new BABYLON.StandardMaterial("SphereMaterial", g3DScene);
            sphereMaterial.emissiveColor = new BABYLON.Color3(1.0, 1.0, 1.0);
            sphere.material = sphereMaterial



            var plane = BABYLON.MeshBuilder.CreatePlane("HoverPlane", { width: 0.5, height: 0.25 }, g3DScene);
            plane.isPickable = false;
            var planeMaterial = new BABYLON.StandardMaterial("HoverMaterial", g3DScene);
            var planeTexture = BABYLON.DynamicTexture = new BABYLON.DynamicTexture("HoverTexture", { width: 512, height: 256 }, g3DScene);
            planeTexture.getContext();
            planeTexture.hasAlpha = true;
            planeTexture.drawText(name, 0, 200, "bold 44px Arial", "white", "transparent", true, true);

            planeMaterial.backFaceCulling = false;
            planeMaterial.disableLighting = true;
            planeMaterial.emissiveColor = new BABYLON.Color3(1.0, 1.0, 1.0);
            planeMaterial.diffuseTexture = planeTexture;
            planeMaterial.opacityTexture = planeTexture;

            plane.material = planeMaterial;
            plane.billboardMode = BABYLON.Mesh.BILLBOARDMODE_ALL;
            plane.position.x += 0;
            plane.position.y += 0.75;

            gHoverSphere = sphere;
            gHoverPlane = plane;
            gHoverPlaneTexture = planeTexture;
        }

        function hover_callback() {
            var galaxyName = this.innerHTML;
            var galaxyData = gUniverse[galaxyName];
            gHoverPlaneTexture.clear();
            gHoverPlaneTexture.drawText(galaxyData.name, 0, 54, "bold 44px Arial", "white", "transparent", true, true);
            gHoverSphere.position.x = gScale * galaxyData.position.x;
            gHoverSphere.position.y = gScale * galaxyData.position.y;
            gHoverSphere.position.z = gScale * galaxyData.position.z;

            gHoverPlane.position.x = gHoverSphere.position.x + 0.25;
            gHoverPlane.position.y = gHoverSphere.position.y;
            gHoverPlane.position.z = gHoverSphere.position.z;

            gHoverPlane.material.opacityTexture = gHoverPlaneTexture
            gHoverPlane.material.diffuseTexture = gHoverPlaneTexture
        }

        function click_callback() {
            // console.log("click");

            gSelectedGalaxy = "";
            //hover_callback();

            var galaxyName = this.innerHTML;
            var galaxyData = gUniverse[galaxyName];
            gSelectedGalaxy = galaxyName;

            // gSelectionPlaneTexture.drawText(galaxyData.x, 0, 100, "bold 44px Arial", "white", "black", true, true);
            // gSelectionSphere.position.x = gScale*galaxyData.x;
            // gSelectionSphere.position.y = gScale*galaxyData.y;
            // gSelectionSphere.position.z = gScale*galaxyData.z;

            // gSelectionPlane.position.x = gSelectionSphere.position.x;
            // gSelectionPlane.position.y = gSelectionSphere.position.y +0.5;
            // gSelectionPlane.position.z = gSelectionSphere.position.z;

            gCamera.position.x = gScale * galaxyData.position.x;
            gCamera.position.y = gScale * galaxyData.position.y;
            gCamera.position.z = gScale * galaxyData.position.z - 3;

            gCamera.setTarget(new BABYLON.Vector3(gScale * galaxyData.position.x, gScale * galaxyData.position.y, gScale * galaxyData.position.z));
        }
        var pcs;
        function vecToLocal(vector, mesh) {
            var m = mesh.getWorldMatrix();
            var v = BABYLON.Vector3.TransformCoordinates(vector, m);
            return v;
        }

        function mousemovef() {
            // var origin = gCamera.position;

            // var forward = new BABYLON.Vector3(0, 0, 1);
            // forward = vecToLocal(forward, pcs);

            // var direction = forward.subtract(origin);
            // direction = BABYLON.Vector3.Normalize(direction);

            // var ray = new BABYLON.Ray(origin, direction, length);
            // // var pickResult = window.scene.pick(window.scene.pointerX, window.scene.pointerY);
            // var pickResult = window.scene.pickWithRay(ray);
            // console.log(pickResult)
        }
        function click_download() {
            var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(gUniverse));
                var dlAnchorElem = document.getElementById('downloadAnchorElem');
                dlAnchorElem.setAttribute("href", dataStr);
                dlAnchorElem.setAttribute("download", "scene.json");
                dlAnchorElem.click();
        }
        function click_galaxy_callback() {
            console.log("click_galaxy_callback");
            var galaxyName = this.innerHTML;
            if (galaxyName == "Universe") {
                var galaxyData = gUniverse[galaxyName];
                gCamera.position.x = 0;//gScale*galaxyData[1];
                gCamera.position.y = 0;//gScale*galaxyData[2];
                gCamera.position.z = -150;//gScale*galaxyData[3]-3;


                gCamera.setTarget(new BABYLON.Vector3(0, 0, 0));//gScale*galaxyData[1],gScale*galaxyData[2],gScale*galaxyData[3]));

                
            }
        }
        var gInitialized = false;
        BABYLON.AbstractMesh.prototype.addPickingBox = function () {
            var _this = this;
            if (!_this || _this._picking_box !== undefined) return;


            var bounds = _this.getBoundingInfo().boundingBox.extendSize.clone();
            bounds = bounds.multiplyByFloats(10, 10, 10);

            _this._picking_box = BABYLON.Mesh.CreateBox('pBox', 1, g3DScene);
            _this._picking_box.scaling = bounds.clone();
            _this._picking_box.parent = _this;
            _this._picking_box.visibility = 0.25; //0.0001;
            _this._picking_box.__isPickingBox = true;

            _this.isPickable = false;
            return _this;
        };
        var createScene = async function (universe) {
            // if(gInitialized == false) {
            //     gInitialized = true;
            //     return;
            // }


            gUniverse = new Object();
            if (sceneToRender != null)
                return null;
            var scene = new BABYLON.Scene(engine);
            var black = [0, 0, 0];
            scene.clearColor = new BABYLON.Color4(128,128,128,0);
            // scene.clearColor = [128,128,128];

            // Create camera and light
            // var light = new BABYLON.PointLight("Point", new BABYLON.Vector3(0, 0, 0), scene);
            var camera = new BABYLON.ArcRotateCamera("Camera", 0.7, 0.7, 150, new BABYLON.Vector3(0, 0, 0), scene);
            camera.wheelPrecision = 60;
            camera.attachControl(canvas, true);

            camera.minZ = 0.01;
            camera.maxZ = 1000;
            gCamera = camera;

            gNavigatorCamera = new BABYLON.ArcRotateCamera("Camera", 0, 0, 150, new BABYLON.Vector3(0, 0, 0), scene);

            gNavigatorCamera.minZ = 0.0001;
            gNavigatorCamera.maxZ = 1000;
            gNavigatorCamera.viewport = new BABYLON.Viewport(0, 0.8, 0.2, 0.2);
            scene.activeCameras.push(camera);
            scene.activeCameras.push(gNavigatorCamera);



            scene.onPointerMove = function () {
                mousemovef();
            };

            BABYLON.RegisterMaterialPlugin("SizeAttenuation", (material) => {
                material.sizeAttenuationPlugin = new SizeAttenuationMaterialPlugin(material);
                return material.colorify;
            });

            var keys = Object.keys(universe);
            keys.sort();
            
            var pcs = null;
            // pcs = new BABYLON.PointsCloudSystem("pcs", 10, scene);

            const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
            const light2 = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, -1, 0), scene);
            var showPoints = true;
            var poly = null;

            if(showPoints) {
                pcs = new BABYLON.PointsCloudSystem("pcs", 30, scene);
            } else {

                //const sphere = BABYLON.MeshBuilder.CreateSphere("s", {});
                var poly = BABYLON.MeshBuilder.CreateBox("system0", { size: 0.1, isPickable: true }, scene);
                // poly.addPickingBox();
                // var sphereMaterial = new BABYLON.StandardMaterial("SphereMaterial", scene);
                // sphereMaterial.backFaceCulling = false;
                // sphereMaterial.disableLighting = true;
                // // sphereMaterial.emissiveColor = new BABYLON.Color3(1.0, 1.0, 1.0);
                // poly.material = sphereMaterial
                // *** Create a lookup of initial indicies to particles
                gMeshes.push(poly);
            }
            let particleIndLookup = {};

            const insideColor = BABYLON.Color3.FromHexString("#888888");
            const outsideColor = BABYLON.Color3.FromHexString("#888888");

            // var numPoints = points.length;

            const positions = [];
            const colors = [];
            const sizes = [];
            var bands = [[[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []], [[], [], [], [], [], [], [], []]];

            // create_selection_sphere(universe[gSystemList[0]].name);
            create_hover_sphere("Jita");
            for (var i = 0; i < keys.length; ++i) {
                // for (var galaxy in universe) {
                var galaxy = keys[i];
                var galaxyName = universe[galaxy].name;
                // if(galaxyName == undefined || !galaxyName.includes("NGC"))
                //      continue;

                gUniverse[galaxyName] = universe[galaxy];
                let x = gScale * universe[galaxy].position.x;
                let y = gScale * universe[galaxy].position.y;
                let z = gScale * universe[galaxy].position.z;
                let security = universe[galaxy].security_status;
                let magnitude = 500;
                var purple = [1, 0, 1];
                var blue = [0, 0, 1];
                var cyan = [0, 1, 1];
                var green = [0, 1, 0];
                var yellow = [1, 1, 0];
                var orange = [1, 0.5, 0];
                var red = [1, 0.6, 0.6];
                var darkRed = [1, 0.2, 0.2];

                var color = black;
                var band = 0;
                var octant = 0;
                if (x > 0) {
                    if (y > 0) {
                        if (z > 0) {
                            octant = 1;
                        } else {
                            octant = 2;
                        }
                    } else {
                        if (z > 0) {
                            octant = 3;
                        } else {
                            octant = 4;
                        }
                    }
                } else {
                    if (y > 0) {
                        if (z > 0) {
                            octant = 5;
                        } else {
                            octant = 6;
                        }
                    } else {
                        if (z > 0) {
                            octant = 7;
                        } else {
                            octant = 8;
                        }
                    }
                }
                var systemType = "unknown";

                if (gUniverse[galaxyName].system_id < 31000000) {

                    if (security <= 0.0) {
                        systemType = "nullsec";
                    } else if (security < 0.5) {
                        systemType = "losec";
                    } else {
                        systemType = "hisec";
                    }
                }
                else if (gUniverse[galaxyName].system_id > 31000000 &&
                    gUniverse[galaxyName].system_id < 32000000) {
                    if (galaxyName[1] == '0') {
                        systemType = "shatteredwormhole"
                    } else {
                        systemType = "wormhole";
                    }
                }
                else if (gUniverse[galaxyName].system_id > 32000000 &&
                    gUniverse[galaxyName].system_id < 33000000) {
                    systemType = "adspace";
                }
                else if (gUniverse[galaxyName].system_id > 34000000 &&
                    gUniverse[galaxyName].system_id < 35000000) {
                    systemType = "vspace";
                }

                if (security <= 0.1) {
                    color = darkRed;
                    band = 0;
                } else if (security <= 0.2) {
                    color = darkRed;
                    band = 1;
                } else if (security <= 0.3) {
                    color = red;
                    band = 2;
                } else if (red <= 0.4) {
                    color = red;
                    band = 3;
                } else if (security <= 0.5) {
                    color = yellow;
                    band = 4;
                } else if (security <= 0.6) {
                    color = cyan;
                    band = 5;
                } else if (security <= 0.7) {
                    color = green;
                    band = 6;
                } else {
                    color = blue;
                    band = 7;
                }
                if (octant) {
                    bands[band][octant - 1] = universe[galaxy];
                }
                if (document.getElementById(universe[galaxy].name) == null) {
                    var range = band + 1;
                    var elementID = systemType;
                    var ul = document.getElementById(elementID);
                    var li = document.createElement("li");
                    var textNode = document.createTextNode(universe[galaxy].name);
                    li.appendChild(textNode);
                    li.addEventListener("mouseover", hover_callback);
                    li.addEventListener("mousedown", click_callback);
                    ul.appendChild(li);
                }
                // if (gUniverse[galaxyName].system_id < 31000000) {
                    positions.push(new BABYLON.Vector3(x, y, z));
                    sizes.push(new BABYLON.Vector3(magnitude, magnitude, magnitude));

                    const babylonColor = new BABYLON.Color3(color[0], color[1], color[2]);
                    colors.push(BABYLON.Color4.FromColor3(babylonColor, 1));
                // }
                // *** Add to our lookup of initial indicies to particles

            }
            if(showPoints) {
                pcs.addPoints(positions.length, (particle, i) => {
                    particle.position = positions[i];
                    particle.color = colors[i];
                    particle.scale = sizes[i];
                });
                await pcs.buildMeshAsync();
                pcs.mesh.material.sizeAttenuationPlugin.isEnabled = true;
            } else {
                for (let p = 0; p < colors.length; p++) {
                    var particle;
                    if (p == 0) {
                        particle = gMeshes[p];
                    } else {
                        particle = poly.clone("system" + p);
                        gMeshes.push(particle);
                    }

                    particle.position = positions[p];
                    var sphereMaterial = new BABYLON.StandardMaterial("material" + p, g3DScene);
                    sphereMaterial.diffuseColor = colors[p];
                    particle.material = sphereMaterial
                    // particle.material.emissiveColor = colors[p];

                    particle.scale = sizes[p];
                    particle.id = p;
                    particleIndLookup[particle._ind] = particle;
                }
            }

            g3DScene = scene;
            scene.onPointerObservable.add((pointerInfo) => {
                switch (pointerInfo.type) {
                    case BABYLON.PointerEventTypes.POINTERDOWN:
                        console.log("POINTER DOWN");
                        break;
                    case BABYLON.PointerEventTypes.POINTERUP:
                        console.log("POINTER UP");
                        break;
                    case BABYLON.PointerEventTypes.POINTERMOVE:
                        console.log("POINTER MOVE");
                        break;
                    case BABYLON.PointerEventTypes.POINTERWHEEL:
                        console.log("POINTER WHEEL");
                        break;
                    case BABYLON.PointerEventTypes.POINTERPICK:
                        console.log("POINTER PICK");
                        break;
                    case BABYLON.PointerEventTypes.POINTERTAP:
                        console.log("POINTER TAP");
                        break;
                    case BABYLON.PointerEventTypes.POINTERDOUBLETAP:
                        console.log("POINTER DOUBLE-TAP");
                        break;
                }

                if (pointerInfo._pickInfo.hit) {
                    console.log("Picked!")
                    console.log(pointerInfo._pickInfo);
                }
            });

            scene.onPointerDown = (evt, pickInfo) => {
                var pickResult = g3DScene.pick(g3DScene.pointerX, g3DScene.pointerY);
                var pickResult = g3DScene.pickWithRay(g3DScene.activeCamera.getForwardRay(800));
                // const pickPartInfo = SPS.pickedParticle(pickInfo);
                if (pickResult.hit) {
                    console.log("Picked!")
                    console.log(pickResult);
                    // const pickPart = SPS.particles[pickPartInfo.idx];
                    // console.log(pickPart);
                    // const projPos = BABYLON.Vector3.Project(
                    //     pickPart.position,
                    //     BABYLON.Matrix.Identity(),
                    //     camera.getTransformationMatrix(),
                    //     { x: 0, y: 0, width: canvas.width, height: canvas.height });
                    // console.log('screen pos', projPos);
                    // const can = document.querySelector("#renderCanvas");
                    // dot.style.left = (projPos.x + can.getBoundingClientRect().left).toFixed(0) + "px";
                    // dot.style.top = (projPos.y + can.getBoundingClientRect().top).toFixed(0) + "px";
                }
            }
            gInitialized = true;
            return scene;
        }

        class SizeAttenuationMaterialPlugin extends BABYLON.MaterialPluginBase {

            sizeAttenuation = 1.05;

            get isEnabled() {
                return this._isEnabled;
            }

            set isEnabled(enabled) {
                if (this._isEnabled === enabled) {
                    return;
                }
                this._isEnabled = enabled;
                this.markAllDefinesAsDirty();
                this._enable(this._isEnabled);
            }

            _isEnabled = false;

            constructor(material) {
                super(material, "SizeAttenuation", 1, { "SIZEATTENUATION": 1 });
            }

            prepareDefines(defines, scene, mesh) {
                defines.SIZEATTENUATION = this._isEnabled;
            }

            getUniforms() {
                return {
                    "ubo": [
                        { name: "sizeAttenuation", size: 1, type: "float" },
                    ],
                    "vertex":
                        `#ifdef SIZEATTENUATION
                        uniform float sizeAttenuation;
                    #endif`,
                };
            }

            bindForSubMesh(uniformBuffer, scene, engine, subMesh) {
                if (this._isEnabled) {
                    uniformBuffer.updateFloat("sizeAttenuation", this.sizeAttenuation);
                }
            }

            getClassName() {
                return "SizeAttenuationMaterialPlugin";
            }

            getCustomCode(shaderType) {
                return shaderType === "vertex" ? {
                    "CUSTOM_VERTEX_MAIN_END": `
                    #ifdef SIZEATTENUATION
                        gl_PointSize = pointSize * (sizeAttenuation - (gl_Position.z / gl_Position.w * 0.5 + 0.5));
                    #endif
                `,
                } : null;
            }
        }

        // loadExternalFile("./Output/Universe.json", function(text){
        /*
        [
    ["WISEA J000001.32+153034.7",0.000061,0.000017,0.627782,0.000000,0.000000,0.627782,"G",38.860000,0.460000,"SPEC"],
    ["WISEA J000001.58-092940.3",0.000109,-0.000018,0.965004,0.000000,0.000000,0.965004,"G",39.790000,0.460000,"SPEC"],
    */

        // JSON.parse(text);

        var gSystemList = new Array();
        function startApplication(data) {
            console.log(data);
            // data = new Array()
            // for(var i=0;i<10000;i++) {
            //     var system = new Object();
            //     system.name = "System " + i;
            //     system.position.x = 2*(Math.random()-0.5);
            //     system.y = 0.2*(Math.random()-0.5);
            //     system.z = 2*(Math.random()-0.5);
            //     system.security_status = Math.random();
            //     data.push(system);
            // }
            window.initFunction = async function () {


                var asyncEngineCreation = async function () {
                    try {
                        return createDefaultEngine();
                    } catch (e) {
                        console.log("the available createEngine function failed. Creating the default engine instead");
                        return createDefaultEngine();
                    }
                }

                window.engine = await asyncEngineCreation();
                if (!engine) throw 'engine should not be null.';
                window.scene = createScene(data);
                startRenderLoop(engine, canvas);
            };
            initFunction().then(() => {
                scene.then(returnedScene => { sceneToRender = returnedScene; });
            });

            // window.initFunction();

            // Resize
            window.addEventListener("resize", function () {
                engine.resize();
            });
        };
        var gCurrentSystemIO = 0;
        var gSystems = new Object();
        var gUniverseMin = new Object();
        var gUniverseMax = new Object();
        gUniverseMin.x = 0;
        gUniverseMin.y = 0;
        gUniverseMin.z = 0;
        gUniverseMax.x = 0;
        gUniverseMax.y = 0;
        gUniverseMax.z = 0;
        function ProcessSystem(systemData) {
            if (systemData != null) {
                gSystems[systemData.system_id] = systemData;
                if (gUniverseMax.x < systemData.position.x) {
                    gUniverseMax.x = systemData.position.x;
                }
                if (gUniverseMax.y < systemData.position.y) {
                    gUniverseMax.y = systemData.position.y;
                }
                if (gUniverseMax.z < systemData.position.z) {
                    gUniverseMax.z = systemData.position.z;
                }

                if (gUniverseMin.x > systemData.position.x) {
                    gUniverseMin.x = systemData.position.x;
                }
                if (gUniverseMin.y > systemData.position.y) {
                    gUniverseMin.y = systemData.position.y;
                }
                if (gUniverseMin.z > systemData.position.z) {
                    gUniverseMin.z = systemData.position.z;
                }

                if (gCurrentSystemIO < gSystemList.length) {
                    GetNextSystem(gSystemList);
                } else {
                    var xSize = gUniverseMax.x - gUniverseMin.x;
                    var ySize = gUniverseMax.y - gUniverseMin.y
                    var zSize = gUniverseMax.z - gUniverseMin.z;

                    for (var system in gSystems) {
                        gSystems[system].position.x /= xSize;
                        gSystems[system].position.y /= ySize;
                        gSystems[system].position.z /= zSize;
                    }
                    startApplication(gSystems);
                }

            } else {
                console.log("ERROR " + gCurrentSystemIO + " of " + gSystemList.length);
                GetNextSystem(gSystemList);
            }

        }
        function GetNextSystem(data) {
            var callback = startApplication;
            if (gSystemList.length == 0) {
                gSystemList = data;
                for (var i = 0; i < data.length; i++) {
                    gSystems[data[i]] = new Object();
                    gSystems[data[i]].system_id = data[i];
                }
            }

            //https://esi.evetech.net/latest/universe/systems/30000002/?datasource=tranquility&language=en
            var url = "https://esi.evetech.net/latest/universe/systems/" + gSystemList[gCurrentSystemIO];
            if (gCurrentSystemIO % 10 == 0) {
                console.log("Getting " + gCurrentSystemIO + " of " + gSystemList.length);
            }
            gCurrentSystemIO++;
            setTimeout(() => { sendCommand(url, "datasource=tranquility&language=en", ProcessSystem); }, 10);
        }
        // var data = new Array();

        //     for(var i=0;i<10000;i++) {
        //         var system = new Object();
        //         system.name = "System " + i;
        //         system.x = 2*(Math.random()-0.5);
        //         system.y = 0.2*(Math.random()-0.5);
        //         system.z = 2*(Math.random()-0.5);
        //         system.security_status = Math.random();
        //         data.push(system);
        //     }
        //     // startApplication(data);
        loadExternalFile("systems.json", function (text) {
            try {
                gSystems = JSON.parse(text);
                startApplication(gSystems);
            } catch {
                sendCommand("https://esi.evetech.net/latest/universe/systems/", "datasource=tranquility", GetNextSystem);
            }
        })

        //https://esi.evetech.net/latest/universe/systems/?datasource=tranquility

    </script>
</body>

</html>